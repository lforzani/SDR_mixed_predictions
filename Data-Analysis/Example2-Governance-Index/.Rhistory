setwd("C:/Users/rgarc/Dropbox/CODES-JMLR/Data-Analysis/Example2-Governance-Index")
library(MASS)
library(car)
library(PCAmixdata)
library(latex2exp)
library(npreg)
library(np)
library(gplots)
#Primero hacemos PCA y PFC estrandar
data <- read.csv("GovernanceDataExtended2.csv", header=TRUE, sep=";")
datos = data[,c(1:7,10:20)]
attach(datos)
p = 6
#q = 9
q=11
Y=datos[1]
X=datos[2:7]
#H=datos[8:16]
H=datos[8:18]
n = dim(datos)[1]
Projections<- read.csv("CGIndexes.csv", header=FALSE, sep=",")
logGDP = as.matrix(Y)
CGindex_PCA = as.matrix(Projections[,1])
CGindex_PFC = as.matrix(Projections[,2])
CGindex_SDROptimal = as.matrix(Projections[,3])
CGindex_PCA = (CGindex_PCA-min(CGindex_PCA))/(max(CGindex_PCA)-min(CGindex_PCA))
CGindex_PFC = (CGindex_PFC-min(CGindex_PFC))/(max(CGindex_PFC)-min(CGindex_PFC))
CGindex_SDROptimal = (CGindex_SDROptimal-min(CGindex_SDROptimal))/(max(CGindex_SDROptimal)-min(CGindex_SDROptimal))
#Plot CG index with Standard PCA
datos_PCA=data.frame(XX = CGindex_PCA,Y=logGDP)
mPCA = lm(Y~XX,data=datos_PCA)
bwnp_PCA<-npregbw(Y~XX, data=datos_PCA)
np_PCA <- npreg(bwnp_PCA)
range(CGindex_PCA)
xvals <- seq(from=min(CGindex_PCA), to=max(CGindex_PCA), by=0.01)
df <- data.frame(XX=xvals)
lp_PCA <- predict(mPCA, newdata=df, interval = "prediction")
lp_PCA <- as.data.frame(lp_PCA) # Coerce the matrix to a dataframe, so we can access the column using the $ operator.
npp_PCA<-predict(np_PCA,newdata=df)
plot(x=datos_PCA$XX, y=datos_PCA$Y, pch=1, las=1, main="", xlab="CG-PCA", ylab="log GDP")
lines(x=df$XX, y=lp_PCA$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PCA, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
plot(x=datos_PCA$XX, y=datos_PCA$Y, pch=1, las=1, main="", xlab="CG-PCA", ylab="log GDP")
plot(x=datos_PCA$XX, y=datos_PCA$Y, pch=1, las=1, main="", xlab="CG-PCA", ylab="log GDP")
lines(x=df$XX, y=lp_PCA$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PCA, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
#Plot for PFC
datos_PFC=data.frame(XX = CGindex_PFC,Y=logGDP)
mPFC = lm(Y~XX,data=datos_PFC)
bwnp_PFC<-npregbw(Y~XX, data=datos_PFC)
np_PFC <- npreg(bwnp_PFC)
range(CGindex_PFC)
xvals <- seq(from=min(CGindex_PFC), to=max(CGindex_PFC), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PFC <- predict(mPFC, newdata=df, interval = "prediction")
lp_PFC <- as.data.frame(lp_PFC)
npp_PFC<-predict(np_PFC,newdata=df)
plot(x=datos_PFC$XX, y=datos_PFC$Y, pch=1, las=1, main="", xlab="CG-PFC", ylab="log GDP")
lines(x=df$XX, y=lp_PFC$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PFC, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
datos_PFCmix=data.frame(XX = CGindex_SDROptimal,Y=logGDP)
mPFCmix = lm(Y~XX,data=datos_PFCmix)
bwnp_PFCmix<-npregbw(Y~XX, data=datos_PFCmix)
np_PFCmix <- npreg(bwnp_PFCmix)
range(CGindex_SDROptimal)
xvals <- seq(from=min(CGindex_SDROptimal), to=max(CGindex_SDROptimal), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PFCmix <- predict(mPFCmix, newdata=df, interval = "prediction")
lp_PFCmix <- as.data.frame(lp_PFCmix)
npp_PFCmix<-predict(np_PFCmix,newdata=df)
plot(x=datos_PFCmix$XX, y=datos_PFCmix$Y, pch=1, las=1, main="", xlab="CG-SDROptimal", ylab="log GDP")
lines(x=df$XX, y=lp_PFCmix$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PFCmix, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
##Plot for PCAmix
Haux<-as.matrix(H)
Hf<-apply(cbind(Haux),2,factor)
pcamixto<-PCAmix(X.quanti = X, X.quali = Hf, ndim = 2,rename.level = TRUE, weight.col.quanti = NULL, weight.col.quali = NULL, graph = TRUE)
projPCAmix <-pcamixto$scores[,1]
CGindex_PCAmix = (projPCAmix-min(projPCAmix))/(max(projPCAmix)-min(projPCAmix))
#save PCA_mix
write.csv(CGindex_PCAmix, file = "PCAmixIndex.csv")
datos_PCAmix=data.frame(XX = CGindex_PCAmix,Y=logGDP)
mPCAmix = lm(Y~XX,data=datos_PCAmix)
bwnp_PCAmix<-npregbw(Y~XX, data=datos_PCAmix)
np_PCAmix <- npreg(bwnp_PCAmix)
range(CGindex_PCAmix)
xvals <- seq(from=min(CGindex_PCAmix), to=max(CGindex_PCAmix), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PCAmix <- predict(mPCAmix, newdata=df, interval = "prediction")
lp_PCAmix <- as.data.frame(lp_PCAmix)
npp_PCAmix<-predict(np_PCAmix,newdata=df)
plot(x=datos_PCAmix$XX, y=datos_PCAmix$Y, pch=1, las=1, main="", xlab="CG-PCAmix", ylab="log GDP")
lines(x=df$XX, y=lp_PCAmix$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PCAmix, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
redDATA <- read.csv("ProjectionsExample2Trad.csv", header=FALSE)
logGDP = as.matrix(redDATA[,1])
CGindex_PFC = as.matrix(redDATA[,2])
CGindex_PCA = as.matrix(redDATA[,3])
CGindex_PCA = (CGindex_PCA-min(CGindex_PCA))/(max(CGindex_PCA)-min(CGindex_PCA))
CGindex_PFC = (CGindex_PFC-min(CGindex_PFC))/(max(CGindex_PFC)-min(CGindex_PFC))
datos_PCA=data.frame(XX = CGindex_PCA,Y=logGDP)
m = lm(Y~XX,data=datos_PCA)
bwnp_PCA<-npregbw(Y~XX, data=datos_PCA)
np_PCA <- npreg(bwnp_PCA)
range(CGindex_PCA)
xvals <- seq(from=min(CGindex_PCA), to=max(CGindex_PCA), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PCA <- predict(m, newdata=df, interval = "prediction")
lp_PCA <- as.data.frame(lp_PCA) # Coerce the matrix to a dataframe, so we can access the column using the $ operator.
npp_PCA<-predict(np_PCA,newdata=df)
plot(x=datos_PCA$XX, y=datos_PCA$Y, pch=1, las=1, main="", xlab="CG-PCA", ylab="log GDP")
lines(x=df$XX, y=lp_PCA$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PCA, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
#Plot for PFC
datos_PFC=data.frame(XX = CGindex_PFC,Y=logGDP)
mPFC = lm(Y~XX,data=datos_PFC)
bwnp_PFC<-npregbw(Y~XX, data=datos_PFC)
np_PFC <- npreg(bwnp_PFC)
range(CGindex_PFC)
xvals <- seq(from=min(CGindex_PFC), to=max(CGindex_PFC), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PFC <- predict(mPFC, newdata=df, interval = "prediction")
lp_PFC <- as.data.frame(lp_PFC)
npp_PFC<-predict(np_PFC,newdata=df)
plot(x=datos_PFC$XX, y=datos_PFC$Y, pch=1, las=1, main="", xlab="CG-PFC", ylab="log GDP")
lines(x=df$XX, y=lp_PFC$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PFC, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
datos_PFC=data.frame(XX = CGindex_PFC,Y=logGDP)
m = lm(Y~XX,data=datos_PFC)
bwnp_PFC<-npregbw(Y~XX, data=datos_PFC)
np_PFC <- npreg(bwnp_PFC)
range(CGindex_PFC)
xvals <- seq(from=min(CGindex_PFC), to=max(CGindex_PFC), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PFC <- predict(m, newdata=df, interval = "prediction")
lp_PFC <- as.data.frame(lp_PFC)
npp_PFC<-predict(np_PFC,newdata=df)
plot(x=datos_PFC$XX, y=datos_PFC$Y, pch=1, las=1, main="", xlab="CG-PFC", ylab="log GDP")
lines(x=df$XX, y=lp_PFC$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PFC, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
#Ahora lo corremos con los resultados de PFCmix y PCA Filmer-Pritchet (usando country as factor)
redDATA <- read.csv("ProjectionsExample2.csv", header=FALSE)
logGDP = as.matrix(redDATA[,1])
CGindex_PFC = as.matrix(redDATA[,2])
CGindex_PCA = as.matrix(redDATA[,3])
CGindex_PCA = (CGindex_PCA-min(CGindex_PCA))/(max(CGindex_PCA)-min(CGindex_PCA))
CGindex_SDROptimalMix  = (CGindex_PFC -min(CGindex_PFC ))/(max(CGindex_PFC )-min(CGindex_PFC ))
datos_PFCmix=data.frame(XX = CGindex_SDROptimalMix,Y=logGDP)
m = lm(Y~XX,data=datos_PFCmix)
bwnp_PFCmix<-npregbw(Y~XX, data=datos_PFCmix)
np_PFCmix <- npreg(bwnp_PFCmix)
range(CGindex_SDROptimalMix)
xvals <- seq(from=min(CGindex_SDROptimalMix), to=max(CGindex_SDROptimalMix), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PFCmix <- predict(m, newdata=df, interval = "prediction")
lp_PFCmix <- as.data.frame(lp_PFCmix)
npp_PFCmix<-predict(np_PFCmix,newdata=df)
plot(x=datos_PFCmix$XX, y=datos_PFCmix$Y, pch=1, las=1, main="", xlab="CG-SDROptimal", ylab="log GDP")
lines(x=df$XX, y=lp_PFCmix$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PFCmix, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
#For PCAmix
data<-read.csv("BasePCAmix.csv", header=TRUE, sep = ";")
X = as.matrix(data[,2:7])
H<-apply(cbind(data[,8]),2,factor)
pcamixto<-PCAmix(X.quanti = X, X.quali = H, ndim = 2,rename.level = FALSE, weight.col.quanti = NULL, weight.col.quali = NULL, graph = TRUE)
projPCAmix <-pcamixto$scores[,1]
CGindex_PCAmix = (projPCAmix-min(projPCAmix))/(max(projPCAmix)-min(projPCAmix))
datos_PCAmix=data.frame(XX = CGindex_PCAmix,Y=logGDP)
m = lm(Y~XX,data=datos_PCAmix)
bwnp_PCAmix<-npregbw(Y~XX, data=datos_PCAmix)
np_PCAmix <- npreg(bwnp_PCAmix)
range(CGindex_PCAmix)
xvals <- seq(from=min(CGindex_PCAmix), to=max(CGindex_PCAmix), by=0.01)
xvals
df <- data.frame(XX=xvals)
df
lp_PCAmix <- predict(m, newdata=df, interval = "prediction")
lp_PCAmix <- as.data.frame(lp_PCAmix)
npp_PCAmix<-predict(np_PCAmix,newdata=df)
plot(x=datos_PCAmix$XX, y=datos_PCAmix$Y, pch=1, las=1, main="", xlab="CG-PCAmix", ylab="log GDP")
lines(x=df$XX, y=lp_PCAmix$fit, lwd=2, col="red")
lines(x=df$XX, y=npp_PCAmix, lwd=2, col="blue")
legend("bottomright", legend=c("Linear", "Kernel"),  col=c("red","blue"), lwd=c(2,2), text.font=2, inset=c(-0.1,1), xpd=TRUE, horiz=TRUE,cex=0.7, bty="n")
#Primero hacemos PCA y PFC estrandar
data <- read.csv("GovernanceDataExtended2.csv", header=TRUE, sep=";")
datos = data[,c(1:7,10:20)]
attach(datos)
p = 6
q=11
Y=datos[1]
X=datos[2:7]
H=datos[8:18]
n = dim(datos)[1]
Haux<-as.matrix(H)
Hf<-apply(cbind(Haux),2,factor)
pcamixto<-PCAmix(X.quanti = X, X.quali = Hf, ndim = 2,rename.level = TRUE, weight.col.quanti = NULL, weight.col.quali = NULL, graph = TRUE)
projPCAmix <-pcamixto$scores[,1]
CGindex_PCAmix = (projPCAmix-min(projPCAmix))/(max(projPCAmix)-min(projPCAmix))
